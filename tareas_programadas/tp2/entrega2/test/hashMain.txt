// #include <iostream>
// #include <chrono>
// #include <random>
// #include "chasht.h" // Asegúrate de que chasht.h esté correctamente implementado e incluido

// const int N = 1000000;
// const int E = 10000;
// const int REPETITIONS = 3;

// void insercionAleatoria(chtable<int>& tabla) {
//     std::random_device rd;
//     std::mt19937 gen(rd());
//     std::uniform_int_distribution<> dis(0, 2 * N);

//     for (int i = 0; i < N; ++i) {
//         int key = dis(gen);
//         tabla.Insert(key);
//     }
// }

// void insercionOrdenada(chtable<int>& tabla) {
//     for (int i = 0; i < N; ++i) {
//         tabla.Insert(i);
//     }
// }

// void buscarElementos(chtable<int>& tabla) {
//     std::random_device rd;
//     std::mt19937 gen(rd());
//     std::uniform_int_distribution<> dis(0, 2 * N);

//     for (int i = 0; i < E; ++i) {
//         int key = dis(gen);
//         tabla.Search(key);
//     }
// }

// void medirTiempoInsercionAleatoria() {
//     for (int i = 0; i < REPETITIONS; ++i) {
//         chtable<int> tabla(N);
//         auto start = std::chrono::high_resolution_clock::now();
//         insercionAleatoria(tabla);
//         auto end = std::chrono::high_resolution_clock::now();
//         std::chrono::duration<double> duration = end - start;
//         std::cout << "Tiempo de insercion aleatoria (repeticion " << i + 1 << "): " << duration.count() << " segundos" << std::endl;
//     }
// }

// void medirTiempoInsercionOrdenada() {
//     for (int i = 0; i < REPETITIONS; ++i) {
//         chtable<int> tabla(N);
//         auto start = std::chrono::high_resolution_clock::now();
//         insercionOrdenada(tabla);
//         auto end = std::chrono::high_resolution_clock::now();
//         std::chrono::duration<double> duration = end - start;
//         std::cout << "Tiempo de insercion ordenada (repeticion " << i + 1 << "): " << duration.count() << " segundos" << std::endl;
//     }
// }

// void medirTiempoBusqueda(chtable<int>& tabla) {
//     auto start = std::chrono::high_resolution_clock::now();
//     buscarElementos(tabla);
//     auto end = std::chrono::high_resolution_clock::now();
//     std::chrono::duration<double> duration = end - start;
//     std::cout << "Tiempo de busqueda: " << duration.count() << " segundos" << std::endl;
// }

// int main() {
//     std::cout << "Pruebas de inserción aleatoria:" << std::endl;
//     medirTiempoInsercionAleatoria();

//     std::cout << "\nPruebas de insercion ordenada:" << std::endl;
//     medirTiempoInsercionOrdenada();

//     std::cout << "\nPruebas de búsqueda tras insercion aleatoria:" << std::endl;
//     for (int i = 0; i < REPETITIONS; ++i) {
//         chtable<int> tabla(N);
//         insercionAleatoria(tabla);
//         medirTiempoBusqueda(tabla);
//     }

//     std::cout << "\nPruebas de búsqueda tras insercion ordenada:" << std::endl;
//     for (int i = 0; i < REPETITIONS; ++i) {
//         chtable<int> tabla(N);
//         insercionOrdenada(tabla);
//         medirTiempoBusqueda(tabla);
//     }

//     return 0;
// }
  